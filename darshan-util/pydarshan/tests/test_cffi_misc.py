# miscellaneous tests for the CFFI backend
# that are not specific to any particular
# mod

import re

import pytest
import numpy as np
import darshan
import darshan.backend.cffi_backend as backend

def test_get_lib_version():
    # check for a reasonable version string
    # returned by get_lib_version()
    actual_version = backend.get_lib_version()
    # must be a string
    assert isinstance(actual_version, str)
    # two periods in semantic version num
    assert actual_version.count('.') == 2
    # stricter regular expression match on
    # the semantic version number
    prog = re.compile(r"^\d+\.\d+\.\d+(-.+)?$")
    match = prog.fullmatch(actual_version)
    assert match is not None
    assert match.group(0) == actual_version


@pytest.mark.parametrize(
    "log_path",
    [
        # this log is the only one that returns a dataframe
        # with 'int' file hashes
        # NOTE: this case fails even before the fix
        # because the fix enforces the data type uint64
        "tests/input/sample.darshan",
        # these following 2 logs return dataframes with
        # 'float' file hashes
        "tests/input/sample-goodost.darshan",
        "tests/input/sample-dxt-simple.darshan",
    ],
)
def test_file_hash_type(log_path):
    # regression test for issue #438
    # see: https://github.com/darshan-hpc/darshan/issues/438

    # check that a single record generated by `log_get_generic_record`
    # has the correct data type for the file hash/id
    log = backend.log_open(log_path)
    rec = backend.log_get_generic_record(log=log, mod_name="POSIX", dtype="pandas")
    # verify the records returned have the correct
    # data type for the ids/hashes
    assert rec["counters"]["id"].dtype == np.uint64
    assert rec["fcounters"]["id"].dtype == np.uint64

    # additionally check that the dataframes
    # generated are of the correct types
    report = darshan.DarshanReport(log_path, read_all=True)
    report.mod_read_all_records("POSIX", dtype="pandas")
    rec_counters = report.records["POSIX"][0]["counters"]
    rec_fcounters = report.records["POSIX"][0]["fcounters"]
    # verify the records returned have the correct
    # data type for the ids/hashes
    assert rec_counters["id"].dtype == np.uint64
    assert rec_fcounters["id"].dtype == np.uint64
